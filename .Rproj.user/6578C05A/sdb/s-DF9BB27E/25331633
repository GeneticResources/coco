{
    "collab_server" : "",
    "contents" : "# Test corrcond\n\n```{r, echo=T}\n  source(\"R/corrcond.R\")\n  library(data.table)\n  ld_matrix = as.matrix(read.table(\"/Volumes/Elements/paintor_runs/final_regions/11_5:72375077-72506696.LD.EUR.old\", header=F))\n  frequencies = read.table(\"/Volumes/Elements/paintor_runs/final_regions/11_5:72375077-72506696.EUR\", header=F)\n  kottgen_meta_analysis = fread(\"~/Dunedin/Tony/Metanalysis/input_smr.txt\", header=T)\n  all_af = fread(\"/Volumes/Elements/ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/all_af.txt\", header=F)\n  freq_af = merge(frequencies,all_af,by.x=3,by.y=1)\n  colnames(freq_af) = c(\"rsid\",\"chr\",\"pos\",\"Z\",\"chr1\",\"pos1\",\"a1\",\"a2\",\"pop1\",\"af\")\n  freq_af$af = as.numeric(freq_af$af)\n  \n    idxs_with_betas = which(freq_af$rsid %in% kottgen_meta_analysis$SNP)\n  #freq_af = merge(freq_af,kottgen_meta_analysis,by=1)\n  ld_matrix= ld_matrix[idxs_with_betas,idxs_with_betas]\n  freq_af = freq_af[idxs_with_betas,]\n  freq_af = merge(freq_af,kottgen_meta_analysis,by=1)\n  freq_af = freq_af[order(freq_af$pos),]\n  #freq_af$n = freq_af$TotalSampleSize\n  #freq_af$se = freq_af$StdErr\n  #freq_af$b = freq_af$Effect\n  #stepwise_conditional_run(data_set = freq_af)\n  stepwise_conditional_wrapper(data_set = freq_af, ld_matrix=ld_matrix,p_value_threshold = 1e-3,var_y = 1.6421, ld_noise=0.1)\n    # Generate hwe_diagonal\n  \n  \n  res_preparation = prep_dataset_common(data_set = freq_af,ld_matrix= ld_matrix,ld_noise=0.1)\n  stepwise_results = stepwise_conditional_run(res_preparation = res_preparation,p_value_threshold = 1e-3,var_y = 1.6421)\n  all_but_one_df = all_but_one(res_preparation=res_preparation,stepwise_results = stepwise_results ,var_y=1.6421)\n  \n\n```\n\n# Alright testing the conditional analysis fuction\n\n```{r, echo=T}\n    source(\"R/corrcond.R\")\n  #  stepwise_results = stepwise_conditional_run(data_set = freq_af, ld_matrix=ld_matrix,p_value_threshold = 0.0001)\n    \n```\n\n```{r, echo=T}\n  freq_af = read.table(\"data/snp_summary.txt\", header=T)\n  ld_matrix = as.matrix(read.table(\"data/ld_matrix_test.txt\", header=F))\n  stepwise_results = stepwise_conditional_run(data_set = freq_af, ld_matrix=ld_matrix,p_value_threshold = 1e-4,var_y = 1.6421)\n  all_but_one_df = all_but_one(data_set =freq_af, ld_matrix = ld_matrix,stepwise_results = stepwise_results ,var_y=1.6421)\n\n```\n# Simulate genotypes and run the all-but-one analysis.\n\n```{r}\nrequire(bindata)\n\n# Parameters of joint distribution\nN <- 1000000\np1 <- 0.1\np2 <- 0.5\nrho<- -.2\n\nh1 <- rmvbin(N, c(p1,p2), bincorr=(1-rho)*diag(2)+rho)\nh2 <- rmvbin(N, c(p1,p2), bincorr=(1-rho)*diag(2)+rho)\n\ng1 = (h1[,1] + h2[,1])\ng2 = (h1[,2] + h2[,2])\nh1 <- rmvbin(N, c(p1,p2), bincorr=(1-rho)*diag(2)+rho)\nh2 <- rmvbin(N, c(p1,p2), bincorr=(1-rho)*diag(2)+rho)\ng3 = (h1[,1] + h2[,1])\ng4= (h1[,2] + h2[,2])\nX = cbind(g1,g2,g3,g4)\nX = apply(X,2, function(x){ \n    af = ( table(x)[3] * 2 +  table(x)[2]) / (2* length(x))\n    X_test = x\n    X_test[ x == 0] = -2  * af\n    X_test[ x == 1] = 1-   2* af\n    X_test[ x == 2] = 2-   2* af\n  return(X_test)\n  })\n\n\n\nX_test = X[,1] \nX_test[ X_test == 0] = -2  * afs[1]\nX_test[ X_test == 1] = 1-   2* afs[1]\nX_test[ X_test == 2] = 2-   2* afs[1]\nX_mean = apply(X,2,function(x) x - mean(x))\nbeta = c(0.05, 0,.05,0)\n\nh_sq = .6\neta = X %*% beta\ny = eta + rnorm(N, 0, sd=sqrt((1-h_sq)))\nX_small = X[1:1e5,]\ny_small = y[1:1e5]\nfitJoint = lm(y_small ~ X_small)\nsummary(fitJoint)\nfit1 = lm(y_small ~ X_small[,1])\nsummary(fit1)\nfit2 = lm(y_small ~ X_small[,2])\nsummary(fit2)\nfit3 = lm(y_small ~ X_small[,3])\nsummary(fit3)\nfit4 = lm(y_small ~ X_small[,4])\nsummary(fit4)\nld_matrix = cor(X_small)\n\nafs = apply(X_small,2, function(x){ ( table(x)[1] * 2 +  table(x)[2]) / (2* length(x))})\n  \n\n\nbetas = c(coef(fit1)[2],coef(fit2)[2],coef(fit3)[2],coef(fit4)[2])\nses =  c(coef(summary(fit1))[2,2],coef(summary(fit2))[2,2],coef(summary(fit3))[2,2],coef(summary(fit4))[2,2])\ninput_data = data.frame(rsid=c(\"rs1\",\"rs2\",\"rs3\",\"rs4\"),b=betas,se=ses,n=1e5,af=afs)\n#input_data = input_data[c(1,3),]\n#input_data = input_data[idx,]\n#ld_matrix = ld_matrix[c(1,3),c(1,3)]\ndf = stepwise_conditional_run(data_set = input_data, ld_matrix = ld_matrix, var_y = var(y_small))\n\nnew_data = all_but_one(stepwise_results = df, data_set =input_data, ld_matrix =ld_matrix, var_y=var(y_small))\n\ninside=cor(X_small[,idx])\n\n\n\n\n\nidx = c(1,3)\nfit_two = (lm(y_small ~ X_small[,1] + X_small[,3]))\nsummary(fit_two)\n\n hwe_diag =  (2*afs[idx] * ( 1- afs[idx]) * 1e5)\n\n#outside2 = diag(diag(t(X_small)%*%X_small)^1) %*% inside\n## We get the same results.\ninside=cor(X_small[,idx])\n\noutside = sqrt(diag(hwe_diag)) %*% inside %*% sqrt(diag(hwe_diag))\n\nbeta_inv = solve(outside)\n#Covariances\nnew_betas = beta_inv %*% diag(hwe_diag) %*% betas[idx]\nnew_betas\ncoef(fit_two)[2:3]\n\ninside=cor(X_small)\ninside\n\n\n\ninside= diag(diag(t(X_small)%*%X_small)^-0.5) %*% t(X_small)%*% X_small %*% diag(diag(t(X_small)%*%X_small)^-0.5) \ninside\n\n\n\n\noutside = sqrt(diag(diag(t(X_small)%*%X_small))) %*% inside %*% sqrt(diag(diag(t(X_small)%*%X_small)))\n\nbeta_inv = solve(outside)\n#Covariances\nnew_betas = beta_inv %*% diag(diag(t(X_small)%*%X_small)) %*% betas\nnew_betas\ncoef(fitJoint)[2:5]\n\n\n\n\n?cor\n\n\n\n\n\n\n\ninside= diag(diag(t(X_small[,idx])%*%X_small[,idx])^-0.5) %*% t(X_small[,idx])%*% X_small[,idx] %*% diag(diag(t(X_small[,idx])%*%X_small[,idx])^-0.5) \ninside = cor(X_small[,idx])\noutside = sqrt(diag(diag(t(X_small[,idx])%*%X_small[,idx]))) %*% inside %*% sqrt(diag(diag(t(X_small[,idx])%*%X_small[,idx])))\n#outside2 = diag(diag(t(X_small)%*%X_small)^1) %*% inside\nbeta_inv = solve(outside)\n#Covariances\nnew_betas = beta_inv %*% diag(diag(t(X_small[,idx])%*%X_small[,idx])) %*% betas[idx]\nnew_betas\ncoef(fit_two)[2:3]\n\ninside= diag(diag(t(X_small[,idx])%*%X_small[,idx])^-0.5) %*% t(X_small[,idx])%*% X_small[,idx] %*% diag(diag(t(X_small[,idx])%*%X_small[,idx])^-0.5) \n\noutside = sqrt(diag(diag(t(X_small[,idx])%*%X_small[,idx]))) %*% inside %*% sqrt(diag(diag(t(X_small[,idx])%*%X_small[,idx])))\n#outside2 = diag(diag(t(X_small)%*%X_small)^1) %*% inside\nbeta_inv = solve(outside)\n#Covariances\nnew_betas = beta_inv %*% diag(diag(t(X_small[,idx])%*%X_small[,idx])) %*% betas[idx]\nnew_betas\n\n\n\n\n\ncoef(fit_two)[2:3]\n#t((var(y) -t(t(apply(X,2,var))) * t(t(betas^2))) / 1e5)%*% beta_inv\nvars = (t(y_small) %*% y_small - t(new_betas) %*% diag(diag(t(X_small[,idx])%*%X_small[,idx])) %*% ((betas[idx]))) / (1e5 - 2)\nsqrt(diag(vars[1] * beta_inv))\ncoef(summary(fit_two))[,2][2:3]\n\n\n\n\n=======\n```\n\n\n\n# Testing with daner files and chr2_200825237_I_2merged_2_200628237_201293237\n```{r, echo=T}\n  source(\"R/symmetrcize.R\")\n  ld_matrix = as.matrix(read.table(\"data/chr2_200825237_I_2merged_2_200628237_201293237.ld\", header=F))\n  ld_matrix = symmetricize(ld_matrix)\n  snpdat = read.table(\"data/chr2_200825237_I_2merged_2_200628237_201293237.ld.snpdat\", header=T)\n  daner = read.table(\"data/daner_PGC_SCZ52_0513a_hq2-chr2_200825237_I_2merged_2_200628237_201293237.txt\", header=T)\n  daner_dat = merge(daner,snpdat, by=\"SNP\")\n  daner_dat$b <- log(daner_dat$OR)\n  daner_dat$se = daner_dat$SE\n  daner_dat$n = daner_dat$sum_n\n  colnames(daner_dat)[c(1,20,21)] = c(\"rsid\",\"af\",\"info\")\n  daner_dat = daner_dat[order(daner_dat$BP.x),]\n  \n  \n  \n    res_preparation = prep_dataset_common(data_set = daner_dat,ld_matrix= ld_matrix,ld_noise=0)\n  stepwise_results = stepwise_conditional_run(res_preparation = res_preparation,p_value_threshold = 1e-3,var_y = 3.7288262)\n  all_but_one_df = all_but_one(res_preparation=res_preparation,stepwise_results = stepwise_results ,var_y=3.7288262)\n  \n  \n  all_but_one_df = all_but_one(data_set =daner_dat, ld_matrix = ld_matrix, stepwise_results = stepwise_resultsd ,var_y=3.7288262)\n  \n  test = daner_dat[c(515,14,1648),]\n  ld_test = ld_matrix[c(515,14,1648),c(515,14,1648)]\n  stepwise_results = stepwise_conditional_run(data_set = test, ld_matrix = ld_test, p_value_threshold = 1e-4,  var_y = 3.7288262)  \n  \nr_inverse= function(gamma,phi,ref_af){\n  B =  (0.5*(1-2*phi) * (1 - 2*ref_af) * gamma -1)\n  A = - (0.084 + 0.9 * phi * (1-2 * phi) * ref_af * (1-ref_af)) * gamma\n  C = gamma\n  x1 = (-B+ sqrt( B^2 - 4 * A * C  ))/(2*A)\n  x2 = (-B - sqrt( B^2 - 4 * A * C  ))/(2*A)\n  return(c(x1,x2))\n  }\n  r =  function(gamma,phi,theta){\n    r = gamma/(((phi*(1-phi)) + 0.5*(1-2*phi) * (1 - 2*theta) * gamma) - (0.084 + 0.9 * phi * (1-2 * phi) * theta * (1-theta)) /(phi*(1-phi))* gamma^2)\n    r\n  }\n  \n  u = 0.3\nalpha = log(u/(1-u))\n  0.2610864* exp(alpha) / ((1+exp(alpha))^2)\n  0.1215532 * exp(alpha) / ((1+exp(alpha))^2)\n  r(0.03,0.5,0.944)\n```\n\n\n\n\n\n",
    "created" : 1470181516169.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "150900484",
    "id" : "25331633",
    "lastKnownWriteTime" : 1470287451,
    "last_content_update" : 1470287451473,
    "path" : "~/Sinai/corrcond/R/test_corrcond.Rmd",
    "project_path" : "R/test_corrcond.Rmd",
    "properties" : {
        "docOutlineVisible" : "0",
        "marks" : "<:23,116\n>:25,1",
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}